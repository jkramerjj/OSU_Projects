TESTING updateCoins():
Test player 0 with 0 treasure card(s) and 0 bonus.
G.coins = 0, expected = 0
G.coins = 0, expected = 0
G.coins = 0, expected = 0
Test player 0 with 0 treasure card(s) and 1 bonus.
G.coins = 1, expected = 1
G.coins = 1, expected = 1
G.coins = 1, expected = 1
Test player 0 with 0 treasure card(s) and 2 bonus.
G.coins = 2, expected = 2
G.coins = 2, expected = 2
G.coins = 2, expected = 2
Test player 0 with 0 treasure card(s) and 3 bonus.
G.coins = 3, expected = 3
G.coins = 3, expected = 3
G.coins = 3, expected = 3
Test player 0 with 0 treasure card(s) and 4 bonus.
G.coins = 4, expected = 4
G.coins = 4, expected = 4
G.coins = 4, expected = 4
Test player 0 with 0 treasure card(s) and 5 bonus.
G.coins = 5, expected = 5
G.coins = 5, expected = 5
G.coins = 5, expected = 5
Test player 0 with 0 treasure card(s) and 6 bonus.
G.coins = 6, expected = 6
G.coins = 6, expected = 6
G.coins = 6, expected = 6
Test player 0 with 0 treasure card(s) and 7 bonus.
G.coins = 7, expected = 7
G.coins = 7, expected = 7
G.coins = 7, expected = 7
Test player 0 with 0 treasure card(s) and 8 bonus.
G.coins = 8, expected = 8
G.coins = 8, expected = 8
G.coins = 8, expected = 8
Test player 0 with 0 treasure card(s) and 9 bonus.
G.coins = 9, expected = 9
G.coins = 9, expected = 9
G.coins = 9, expected = 9
Test player 0 with 0 treasure card(s) and 10 bonus.
G.coins = 10, expected = 10
G.coins = 10, expected = 10
G.coins = 10, expected = 10
Test player 0 with 1 treasure card(s) and 0 bonus.
G.coins = 1, expected = 1
G.coins = 2, expected = 2
G.coins = 3, expected = 3
Test player 0 with 1 treasure card(s) and 1 bonus.
G.coins = 2, expected = 2
G.coins = 3, expected = 3
G.coins = 4, expected = 4
Test player 0 with 1 treasure card(s) and 2 bonus.
G.coins = 3, expected = 3
G.coins = 4, expected = 4
G.coins = 5, expected = 5
Test player 0 with 1 treasure card(s) and 3 bonus.
G.coins = 4, expected = 4
G.coins = 5, expected = 5
G.coins = 6, expected = 6
Test player 0 with 1 treasure card(s) and 4 bonus.
G.coins = 5, expected = 5
G.coins = 6, expected = 6
G.coins = 7, expected = 7
Test player 0 with 1 treasure card(s) and 5 bonus.
G.coins = 6, expected = 6
G.coins = 7, expected = 7
G.coins = 8, expected = 8
Test player 0 with 1 treasure card(s) and 6 bonus.
G.coins = 7, expected = 7
G.coins = 8, expected = 8
G.coins = 9, expected = 9
Test player 0 with 1 treasure card(s) and 7 bonus.
G.coins = 8, expected = 8
G.coins = 9, expected = 9
G.coins = 10, expected = 10
Test player 0 with 1 treasure card(s) and 8 bonus.
G.coins = 9, expected = 9
G.coins = 10, expected = 10
G.coins = 11, expected = 11
Test player 0 with 1 treasure card(s) and 9 bonus.
G.coins = 10, expected = 10
G.coins = 11, expected = 11
G.coins = 12, expected = 12
Test player 0 with 1 treasure card(s) and 10 bonus.
G.coins = 11, expected = 11
G.coins = 12, expected = 12
G.coins = 13, expected = 13
Test player 0 with 2 treasure card(s) and 0 bonus.
G.coins = 2, expected = 2
G.coins = 4, expected = 4
G.coins = 6, expected = 6
Test player 0 with 2 treasure card(s) and 1 bonus.
G.coins = 3, expected = 3
G.coins = 5, expected = 5
G.coins = 7, expected = 7
Test player 0 with 2 treasure card(s) and 2 bonus.
G.coins = 4, expected = 4
G.coins = 6, expected = 6
G.coins = 8, expected = 8
Test player 0 with 2 treasure card(s) and 3 bonus.
G.coins = 5, expected = 5
G.coins = 7, expected = 7
G.coins = 9, expected = 9
Test player 0 with 2 treasure card(s) and 4 bonus.
G.coins = 6, expected = 6
G.coins = 8, expected = 8
G.coins = 10, expected = 10
Test player 0 with 2 treasure card(s) and 5 bonus.
G.coins = 7, expected = 7
G.coins = 9, expected = 9
G.coins = 11, expected = 11
Test player 0 with 2 treasure card(s) and 6 bonus.
G.coins = 8, expected = 8
G.coins = 10, expected = 10
G.coins = 12, expected = 12
Test player 0 with 2 treasure card(s) and 7 bonus.
G.coins = 9, expected = 9
G.coins = 11, expected = 11
G.coins = 13, expected = 13
Test player 0 with 2 treasure card(s) and 8 bonus.
G.coins = 10, expected = 10
G.coins = 12, expected = 12
G.coins = 14, expected = 14
Test player 0 with 2 treasure card(s) and 9 bonus.
G.coins = 11, expected = 11
G.coins = 13, expected = 13
G.coins = 15, expected = 15
Test player 0 with 2 treasure card(s) and 10 bonus.
G.coins = 12, expected = 12
G.coins = 14, expected = 14
G.coins = 16, expected = 16
Test player 0 with 3 treasure card(s) and 0 bonus.
G.coins = 3, expected = 3
G.coins = 6, expected = 6
G.coins = 9, expected = 9
Test player 0 with 3 treasure card(s) and 1 bonus.
G.coins = 4, expected = 4
G.coins = 7, expected = 7
G.coins = 10, expected = 10
Test player 0 with 3 treasure card(s) and 2 bonus.
G.coins = 5, expected = 5
G.coins = 8, expected = 8
G.coins = 11, expected = 11
Test player 0 with 3 treasure card(s) and 3 bonus.
G.coins = 6, expected = 6
G.coins = 9, expected = 9
G.coins = 12, expected = 12
Test player 0 with 3 treasure card(s) and 4 bonus.
G.coins = 7, expected = 7
G.coins = 10, expected = 10
G.coins = 13, expected = 13
Test player 0 with 3 treasure card(s) and 5 bonus.
G.coins = 8, expected = 8
G.coins = 11, expected = 11
G.coins = 14, expected = 14
Test player 0 with 3 treasure card(s) and 6 bonus.
G.coins = 9, expected = 9
G.coins = 12, expected = 12
G.coins = 15, expected = 15
Test player 0 with 3 treasure card(s) and 7 bonus.
G.coins = 10, expected = 10
G.coins = 13, expected = 13
G.coins = 16, expected = 16
Test player 0 with 3 treasure card(s) and 8 bonus.
G.coins = 11, expected = 11
G.coins = 14, expected = 14
G.coins = 17, expected = 17
Test player 0 with 3 treasure card(s) and 9 bonus.
G.coins = 12, expected = 12
G.coins = 15, expected = 15
G.coins = 18, expected = 18
Test player 0 with 3 treasure card(s) and 10 bonus.
G.coins = 13, expected = 13
G.coins = 16, expected = 16
G.coins = 19, expected = 19
Test player 0 with 4 treasure card(s) and 0 bonus.
G.coins = 4, expected = 4
G.coins = 8, expected = 8
G.coins = 12, expected = 12
Test player 0 with 4 treasure card(s) and 1 bonus.
G.coins = 5, expected = 5
G.coins = 9, expected = 9
G.coins = 13, expected = 13
Test player 0 with 4 treasure card(s) and 2 bonus.
G.coins = 6, expected = 6
G.coins = 10, expected = 10
G.coins = 14, expected = 14
Test player 0 with 4 treasure card(s) and 3 bonus.
G.coins = 7, expected = 7
G.coins = 11, expected = 11
G.coins = 15, expected = 15
Test player 0 with 4 treasure card(s) and 4 bonus.
G.coins = 8, expected = 8
G.coins = 12, expected = 12
G.coins = 16, expected = 16
Test player 0 with 4 treasure card(s) and 5 bonus.
G.coins = 9, expected = 9
G.coins = 13, expected = 13
G.coins = 17, expected = 17
Test player 0 with 4 treasure card(s) and 6 bonus.
G.coins = 10, expected = 10
G.coins = 14, expected = 14
G.coins = 18, expected = 18
Test player 0 with 4 treasure card(s) and 7 bonus.
G.coins = 11, expected = 11
G.coins = 15, expected = 15
G.coins = 19, expected = 19
Test player 0 with 4 treasure card(s) and 8 bonus.
G.coins = 12, expected = 12
G.coins = 16, expected = 16
G.coins = 20, expected = 20
Test player 0 with 4 treasure card(s) and 9 bonus.
G.coins = 13, expected = 13
G.coins = 17, expected = 17
G.coins = 21, expected = 21
Test player 0 with 4 treasure card(s) and 10 bonus.
G.coins = 14, expected = 14
G.coins = 18, expected = 18
G.coins = 22, expected = 22
Test player 0 with 5 treasure card(s) and 0 bonus.
G.coins = 5, expected = 5
G.coins = 10, expected = 10
G.coins = 15, expected = 15
Test player 0 with 5 treasure card(s) and 1 bonus.
G.coins = 6, expected = 6
G.coins = 11, expected = 11
G.coins = 16, expected = 16
Test player 0 with 5 treasure card(s) and 2 bonus.
G.coins = 7, expected = 7
G.coins = 12, expected = 12
G.coins = 17, expected = 17
Test player 0 with 5 treasure card(s) and 3 bonus.
G.coins = 8, expected = 8
G.coins = 13, expected = 13
G.coins = 18, expected = 18
Test player 0 with 5 treasure card(s) and 4 bonus.
G.coins = 9, expected = 9
G.coins = 14, expected = 14
G.coins = 19, expected = 19
Test player 0 with 5 treasure card(s) and 5 bonus.
G.coins = 10, expected = 10
G.coins = 15, expected = 15
G.coins = 20, expected = 20
Test player 0 with 5 treasure card(s) and 6 bonus.
G.coins = 11, expected = 11
G.coins = 16, expected = 16
G.coins = 21, expected = 21
Test player 0 with 5 treasure card(s) and 7 bonus.
G.coins = 12, expected = 12
G.coins = 17, expected = 17
G.coins = 22, expected = 22
Test player 0 with 5 treasure card(s) and 8 bonus.
G.coins = 13, expected = 13
G.coins = 18, expected = 18
G.coins = 23, expected = 23
Test player 0 with 5 treasure card(s) and 9 bonus.
G.coins = 14, expected = 14
G.coins = 19, expected = 19
G.coins = 24, expected = 24
Test player 0 with 5 treasure card(s) and 10 bonus.
G.coins = 15, expected = 15
G.coins = 20, expected = 20
G.coins = 25, expected = 25
Test player 1 with 0 treasure card(s) and 0 bonus.
G.coins = 0, expected = 0
G.coins = 0, expected = 0
G.coins = 0, expected = 0
Test player 1 with 0 treasure card(s) and 1 bonus.
G.coins = 1, expected = 1
G.coins = 1, expected = 1
G.coins = 1, expected = 1
Test player 1 with 0 treasure card(s) and 2 bonus.
G.coins = 2, expected = 2
G.coins = 2, expected = 2
G.coins = 2, expected = 2
Test player 1 with 0 treasure card(s) and 3 bonus.
G.coins = 3, expected = 3
G.coins = 3, expected = 3
G.coins = 3, expected = 3
Test player 1 with 0 treasure card(s) and 4 bonus.
G.coins = 4, expected = 4
G.coins = 4, expected = 4
G.coins = 4, expected = 4
Test player 1 with 0 treasure card(s) and 5 bonus.
G.coins = 5, expected = 5
G.coins = 5, expected = 5
G.coins = 5, expected = 5
Test player 1 with 0 treasure card(s) and 6 bonus.
G.coins = 6, expected = 6
G.coins = 6, expected = 6
G.coins = 6, expected = 6
Test player 1 with 0 treasure card(s) and 7 bonus.
G.coins = 7, expected = 7
G.coins = 7, expected = 7
G.coins = 7, expected = 7
Test player 1 with 0 treasure card(s) and 8 bonus.
G.coins = 8, expected = 8
G.coins = 8, expected = 8
G.coins = 8, expected = 8
Test player 1 with 0 treasure card(s) and 9 bonus.
G.coins = 9, expected = 9
G.coins = 9, expected = 9
G.coins = 9, expected = 9
Test player 1 with 0 treasure card(s) and 10 bonus.
G.coins = 10, expected = 10
G.coins = 10, expected = 10
G.coins = 10, expected = 10
Test player 1 with 1 treasure card(s) and 0 bonus.
G.coins = 1, expected = 1
G.coins = 2, expected = 2
G.coins = 3, expected = 3
Test player 1 with 1 treasure card(s) and 1 bonus.
G.coins = 2, expected = 2
G.coins = 3, expected = 3
G.coins = 4, expected = 4
Test player 1 with 1 treasure card(s) and 2 bonus.
G.coins = 3, expected = 3
G.coins = 4, expected = 4
G.coins = 5, expected = 5
Test player 1 with 1 treasure card(s) and 3 bonus.
G.coins = 4, expected = 4
G.coins = 5, expected = 5
G.coins = 6, expected = 6
Test player 1 with 1 treasure card(s) and 4 bonus.
G.coins = 5, expected = 5
G.coins = 6, expected = 6
G.coins = 7, expected = 7
Test player 1 with 1 treasure card(s) and 5 bonus.
G.coins = 6, expected = 6
G.coins = 7, expected = 7
G.coins = 8, expected = 8
Test player 1 with 1 treasure card(s) and 6 bonus.
G.coins = 7, expected = 7
G.coins = 8, expected = 8
G.coins = 9, expected = 9
Test player 1 with 1 treasure card(s) and 7 bonus.
G.coins = 8, expected = 8
G.coins = 9, expected = 9
G.coins = 10, expected = 10
Test player 1 with 1 treasure card(s) and 8 bonus.
G.coins = 9, expected = 9
G.coins = 10, expected = 10
G.coins = 11, expected = 11
Test player 1 with 1 treasure card(s) and 9 bonus.
G.coins = 10, expected = 10
G.coins = 11, expected = 11
G.coins = 12, expected = 12
Test player 1 with 1 treasure card(s) and 10 bonus.
G.coins = 11, expected = 11
G.coins = 12, expected = 12
G.coins = 13, expected = 13
Test player 1 with 2 treasure card(s) and 0 bonus.
G.coins = 2, expected = 2
G.coins = 4, expected = 4
G.coins = 6, expected = 6
Test player 1 with 2 treasure card(s) and 1 bonus.
G.coins = 3, expected = 3
G.coins = 5, expected = 5
G.coins = 7, expected = 7
Test player 1 with 2 treasure card(s) and 2 bonus.
G.coins = 4, expected = 4
G.coins = 6, expected = 6
G.coins = 8, expected = 8
Test player 1 with 2 treasure card(s) and 3 bonus.
G.coins = 5, expected = 5
G.coins = 7, expected = 7
G.coins = 9, expected = 9
Test player 1 with 2 treasure card(s) and 4 bonus.
G.coins = 6, expected = 6
G.coins = 8, expected = 8
G.coins = 10, expected = 10
Test player 1 with 2 treasure card(s) and 5 bonus.
G.coins = 7, expected = 7
G.coins = 9, expected = 9
G.coins = 11, expected = 11
Test player 1 with 2 treasure card(s) and 6 bonus.
G.coins = 8, expected = 8
G.coins = 10, expected = 10
G.coins = 12, expected = 12
Test player 1 with 2 treasure card(s) and 7 bonus.
G.coins = 9, expected = 9
G.coins = 11, expected = 11
G.coins = 13, expected = 13
Test player 1 with 2 treasure card(s) and 8 bonus.
G.coins = 10, expected = 10
G.coins = 12, expected = 12
G.coins = 14, expected = 14
Test player 1 with 2 treasure card(s) and 9 bonus.
G.coins = 11, expected = 11
G.coins = 13, expected = 13
G.coins = 15, expected = 15
Test player 1 with 2 treasure card(s) and 10 bonus.
G.coins = 12, expected = 12
G.coins = 14, expected = 14
G.coins = 16, expected = 16
Test player 1 with 3 treasure card(s) and 0 bonus.
G.coins = 3, expected = 3
G.coins = 6, expected = 6
G.coins = 9, expected = 9
Test player 1 with 3 treasure card(s) and 1 bonus.
G.coins = 4, expected = 4
G.coins = 7, expected = 7
G.coins = 10, expected = 10
Test player 1 with 3 treasure card(s) and 2 bonus.
G.coins = 5, expected = 5
G.coins = 8, expected = 8
G.coins = 11, expected = 11
Test player 1 with 3 treasure card(s) and 3 bonus.
G.coins = 6, expected = 6
G.coins = 9, expected = 9
G.coins = 12, expected = 12
Test player 1 with 3 treasure card(s) and 4 bonus.
G.coins = 7, expected = 7
G.coins = 10, expected = 10
G.coins = 13, expected = 13
Test player 1 with 3 treasure card(s) and 5 bonus.
G.coins = 8, expected = 8
G.coins = 11, expected = 11
G.coins = 14, expected = 14
Test player 1 with 3 treasure card(s) and 6 bonus.
G.coins = 9, expected = 9
G.coins = 12, expected = 12
G.coins = 15, expected = 15
Test player 1 with 3 treasure card(s) and 7 bonus.
G.coins = 10, expected = 10
G.coins = 13, expected = 13
G.coins = 16, expected = 16
Test player 1 with 3 treasure card(s) and 8 bonus.
G.coins = 11, expected = 11
G.coins = 14, expected = 14
G.coins = 17, expected = 17
Test player 1 with 3 treasure card(s) and 9 bonus.
G.coins = 12, expected = 12
G.coins = 15, expected = 15
G.coins = 18, expected = 18
Test player 1 with 3 treasure card(s) and 10 bonus.
G.coins = 13, expected = 13
G.coins = 16, expected = 16
G.coins = 19, expected = 19
Test player 1 with 4 treasure card(s) and 0 bonus.
G.coins = 4, expected = 4
G.coins = 8, expected = 8
G.coins = 12, expected = 12
Test player 1 with 4 treasure card(s) and 1 bonus.
G.coins = 5, expected = 5
G.coins = 9, expected = 9
G.coins = 13, expected = 13
Test player 1 with 4 treasure card(s) and 2 bonus.
G.coins = 6, expected = 6
G.coins = 10, expected = 10
G.coins = 14, expected = 14
Test player 1 with 4 treasure card(s) and 3 bonus.
G.coins = 7, expected = 7
G.coins = 11, expected = 11
G.coins = 15, expected = 15
Test player 1 with 4 treasure card(s) and 4 bonus.
G.coins = 8, expected = 8
G.coins = 12, expected = 12
G.coins = 16, expected = 16
Test player 1 with 4 treasure card(s) and 5 bonus.
G.coins = 9, expected = 9
G.coins = 13, expected = 13
G.coins = 17, expected = 17
Test player 1 with 4 treasure card(s) and 6 bonus.
G.coins = 10, expected = 10
G.coins = 14, expected = 14
G.coins = 18, expected = 18
Test player 1 with 4 treasure card(s) and 7 bonus.
G.coins = 11, expected = 11
G.coins = 15, expected = 15
G.coins = 19, expected = 19
Test player 1 with 4 treasure card(s) and 8 bonus.
G.coins = 12, expected = 12
G.coins = 16, expected = 16
G.coins = 20, expected = 20
Test player 1 with 4 treasure card(s) and 9 bonus.
G.coins = 13, expected = 13
G.coins = 17, expected = 17
G.coins = 21, expected = 21
Test player 1 with 4 treasure card(s) and 10 bonus.
G.coins = 14, expected = 14
G.coins = 18, expected = 18
G.coins = 22, expected = 22
Test player 1 with 5 treasure card(s) and 0 bonus.
G.coins = 5, expected = 5
G.coins = 10, expected = 10
G.coins = 15, expected = 15
Test player 1 with 5 treasure card(s) and 1 bonus.
G.coins = 6, expected = 6
G.coins = 11, expected = 11
G.coins = 16, expected = 16
Test player 1 with 5 treasure card(s) and 2 bonus.
G.coins = 7, expected = 7
G.coins = 12, expected = 12
G.coins = 17, expected = 17
Test player 1 with 5 treasure card(s) and 3 bonus.
G.coins = 8, expected = 8
G.coins = 13, expected = 13
G.coins = 18, expected = 18
Test player 1 with 5 treasure card(s) and 4 bonus.
G.coins = 9, expected = 9
G.coins = 14, expected = 14
G.coins = 19, expected = 19
Test player 1 with 5 treasure card(s) and 5 bonus.
G.coins = 10, expected = 10
G.coins = 15, expected = 15
G.coins = 20, expected = 20
Test player 1 with 5 treasure card(s) and 6 bonus.
G.coins = 11, expected = 11
G.coins = 16, expected = 16
G.coins = 21, expected = 21
Test player 1 with 5 treasure card(s) and 7 bonus.
G.coins = 12, expected = 12
G.coins = 17, expected = 17
G.coins = 22, expected = 22
Test player 1 with 5 treasure card(s) and 8 bonus.
G.coins = 13, expected = 13
G.coins = 18, expected = 18
G.coins = 23, expected = 23
Test player 1 with 5 treasure card(s) and 9 bonus.
G.coins = 14, expected = 14
G.coins = 19, expected = 19
G.coins = 24, expected = 24
Test player 1 with 5 treasure card(s) and 10 bonus.
G.coins = 15, expected = 15
G.coins = 20, expected = 20
G.coins = 25, expected = 25
All tests passed!
TESTING gainCard():
Test player 0 with 10 supplyCount, supplyPos 0, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 0, expected = 0
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 0 with 8 supplyCount, supplyPos 1, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 1, expected = 1
G.discardCount = 1, expected = 1
G.supplyCount = 7, expected = 7
Test player 0 with 8 supplyCount, supplyPos 2, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 2, expected = 2
G.discardCount = 1, expected = 1
G.supplyCount = 7, expected = 7
Test player 0 with 8 supplyCount, supplyPos 3, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 3, expected = 3
G.discardCount = 1, expected = 1
G.supplyCount = 7, expected = 7
Test player 0 with 46 supplyCount, supplyPos 4, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 4, expected = 4
G.discardCount = 1, expected = 1
G.supplyCount = 45, expected = 45
Test player 0 with 40 supplyCount, supplyPos 5, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 5, expected = 5
G.discardCount = 1, expected = 1
G.supplyCount = 39, expected = 39
Test player 0 with 30 supplyCount, supplyPos 6, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 6, expected = 6
G.discardCount = 1, expected = 1
G.supplyCount = 29, expected = 29
Test player 0 with 10 supplyCount, supplyPos 7, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 7, expected = 7
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 8, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 8, expected = 8
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 9, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 9, expected = 9
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 0 with 8 supplyCount, supplyPos 10, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 10, expected = 10
G.discardCount = 1, expected = 1
G.supplyCount = 7, expected = 7
Test player 0 with 10 supplyCount, supplyPos 11, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 11, expected = 11
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 12, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 12, expected = 12
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 13, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 13, expected = 13
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 14, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 14, expected = 14
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 15, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 15, expected = 15
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 0 with 8 supplyCount, supplyPos 16, and flag 0
G.deckCount = 5, expected = 5
G.handCount = 5, expected = 5
G.discardCard = 16, expected = 16
G.discardCount = 1, expected = 1
G.supplyCount = 7, expected = 7
Test player 0 with -1 supplyCount, supplyPos 17, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 18, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 19, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 20, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 21, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 22, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 23, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 24, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 25, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 26, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with 10 supplyCount, supplyPos 0, and flag 1
G.deckCard = 0, expected = 0
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 8 supplyCount, supplyPos 1, and flag 1
G.deckCard = 1, expected = 1
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 0 with 8 supplyCount, supplyPos 2, and flag 1
G.deckCard = 2, expected = 2
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 0 with 8 supplyCount, supplyPos 3, and flag 1
G.deckCard = 3, expected = 3
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 0 with 46 supplyCount, supplyPos 4, and flag 1
G.deckCard = 4, expected = 4
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 45, expected = 45
Test player 0 with 40 supplyCount, supplyPos 5, and flag 1
G.deckCard = 5, expected = 5
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 39, expected = 39
Test player 0 with 30 supplyCount, supplyPos 6, and flag 1
G.deckCard = 6, expected = 6
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 29, expected = 29
Test player 0 with 10 supplyCount, supplyPos 7, and flag 1
G.deckCard = 7, expected = 7
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 8, and flag 1
G.deckCard = 8, expected = 8
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 9, and flag 1
G.deckCard = 9, expected = 9
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 8 supplyCount, supplyPos 10, and flag 1
G.deckCard = 10, expected = 10
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 0 with 10 supplyCount, supplyPos 11, and flag 1
G.deckCard = 11, expected = 11
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 12, and flag 1
G.deckCard = 12, expected = 12
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 13, and flag 1
G.deckCard = 13, expected = 13
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 14, and flag 1
G.deckCard = 14, expected = 14
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 15, and flag 1
G.deckCard = 15, expected = 15
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 8 supplyCount, supplyPos 16, and flag 1
G.deckCard = 16, expected = 16
G.deckCount = 6, expected = 6
G.handCount = 5, expected = 5
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 0 with -1 supplyCount, supplyPos 17, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 18, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 19, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 20, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 21, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 22, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 23, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 24, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 25, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 26, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with 10 supplyCount, supplyPos 0, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 0, expected = 0
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 8 supplyCount, supplyPos 1, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 1, expected = 1
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 0 with 8 supplyCount, supplyPos 2, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 2, expected = 2
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 0 with 8 supplyCount, supplyPos 3, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 3, expected = 3
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 0 with 46 supplyCount, supplyPos 4, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 4, expected = 4
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 45, expected = 45
Test player 0 with 40 supplyCount, supplyPos 5, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 5, expected = 5
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 39, expected = 39
Test player 0 with 30 supplyCount, supplyPos 6, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 6, expected = 6
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 29, expected = 29
Test player 0 with 10 supplyCount, supplyPos 7, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 7, expected = 7
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 8, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 8, expected = 8
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 9, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 9, expected = 9
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 8 supplyCount, supplyPos 10, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 10, expected = 10
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 0 with 10 supplyCount, supplyPos 11, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 11, expected = 11
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 12, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 12, expected = 12
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 13, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 13, expected = 13
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 14, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 14, expected = 14
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 10 supplyCount, supplyPos 15, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 15, expected = 15
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 0 with 8 supplyCount, supplyPos 16, and flag 2
G.deckCount = 5, expected = 5
G.handCard = 16, expected = 16
G.handCount = 6, expected = 6
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 0 with -1 supplyCount, supplyPos 17, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 18, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 19, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 20, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 21, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 22, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 23, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 24, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 25, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 0 with -1 supplyCount, supplyPos 26, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with 10 supplyCount, supplyPos 0, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 0, expected = 0
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 1 with 8 supplyCount, supplyPos 1, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 1, expected = 1
G.discardCount = 1, expected = 1
G.supplyCount = 7, expected = 7
Test player 1 with 8 supplyCount, supplyPos 2, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 2, expected = 2
G.discardCount = 1, expected = 1
G.supplyCount = 7, expected = 7
Test player 1 with 8 supplyCount, supplyPos 3, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 3, expected = 3
G.discardCount = 1, expected = 1
G.supplyCount = 7, expected = 7
Test player 1 with 46 supplyCount, supplyPos 4, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 4, expected = 4
G.discardCount = 1, expected = 1
G.supplyCount = 45, expected = 45
Test player 1 with 40 supplyCount, supplyPos 5, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 5, expected = 5
G.discardCount = 1, expected = 1
G.supplyCount = 39, expected = 39
Test player 1 with 30 supplyCount, supplyPos 6, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 6, expected = 6
G.discardCount = 1, expected = 1
G.supplyCount = 29, expected = 29
Test player 1 with 10 supplyCount, supplyPos 7, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 7, expected = 7
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 8, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 8, expected = 8
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 9, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 9, expected = 9
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 1 with 8 supplyCount, supplyPos 10, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 10, expected = 10
G.discardCount = 1, expected = 1
G.supplyCount = 7, expected = 7
Test player 1 with 10 supplyCount, supplyPos 11, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 11, expected = 11
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 12, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 12, expected = 12
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 13, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 13, expected = 13
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 14, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 14, expected = 14
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 15, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 15, expected = 15
G.discardCount = 1, expected = 1
G.supplyCount = 9, expected = 9
Test player 1 with 8 supplyCount, supplyPos 16, and flag 0
G.deckCount = 10, expected = 10
G.handCount = 0, expected = 0
G.discardCard = 16, expected = 16
G.discardCount = 1, expected = 1
G.supplyCount = 7, expected = 7
Test player 1 with -1 supplyCount, supplyPos 17, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 18, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 19, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 20, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 21, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 22, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 23, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 24, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 25, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 26, and flag 0
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with 10 supplyCount, supplyPos 0, and flag 1
G.deckCard = 0, expected = 0
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 8 supplyCount, supplyPos 1, and flag 1
G.deckCard = 1, expected = 1
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 1 with 8 supplyCount, supplyPos 2, and flag 1
G.deckCard = 2, expected = 2
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 1 with 8 supplyCount, supplyPos 3, and flag 1
G.deckCard = 3, expected = 3
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 1 with 46 supplyCount, supplyPos 4, and flag 1
G.deckCard = 4, expected = 4
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 45, expected = 45
Test player 1 with 40 supplyCount, supplyPos 5, and flag 1
G.deckCard = 5, expected = 5
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 39, expected = 39
Test player 1 with 30 supplyCount, supplyPos 6, and flag 1
G.deckCard = 6, expected = 6
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 29, expected = 29
Test player 1 with 10 supplyCount, supplyPos 7, and flag 1
G.deckCard = 7, expected = 7
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 8, and flag 1
G.deckCard = 8, expected = 8
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 9, and flag 1
G.deckCard = 9, expected = 9
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 8 supplyCount, supplyPos 10, and flag 1
G.deckCard = 10, expected = 10
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 1 with 10 supplyCount, supplyPos 11, and flag 1
G.deckCard = 11, expected = 11
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 12, and flag 1
G.deckCard = 12, expected = 12
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 13, and flag 1
G.deckCard = 13, expected = 13
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 14, and flag 1
G.deckCard = 14, expected = 14
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 15, and flag 1
G.deckCard = 15, expected = 15
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 8 supplyCount, supplyPos 16, and flag 1
G.deckCard = 16, expected = 16
G.deckCount = 11, expected = 11
G.handCount = 0, expected = 0
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 1 with -1 supplyCount, supplyPos 17, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 18, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 19, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 20, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 21, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 22, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 23, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 24, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 25, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 26, and flag 1
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with 10 supplyCount, supplyPos 0, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 0, expected = 0
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 8 supplyCount, supplyPos 1, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 1, expected = 1
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 1 with 8 supplyCount, supplyPos 2, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 2, expected = 2
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 1 with 8 supplyCount, supplyPos 3, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 3, expected = 3
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 1 with 46 supplyCount, supplyPos 4, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 4, expected = 4
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 45, expected = 45
Test player 1 with 40 supplyCount, supplyPos 5, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 5, expected = 5
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 39, expected = 39
Test player 1 with 30 supplyCount, supplyPos 6, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 6, expected = 6
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 29, expected = 29
Test player 1 with 10 supplyCount, supplyPos 7, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 7, expected = 7
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 8, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 8, expected = 8
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 9, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 9, expected = 9
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 8 supplyCount, supplyPos 10, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 10, expected = 10
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 1 with 10 supplyCount, supplyPos 11, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 11, expected = 11
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 12, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 12, expected = 12
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 13, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 13, expected = 13
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 14, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 14, expected = 14
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 10 supplyCount, supplyPos 15, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 15, expected = 15
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 9, expected = 9
Test player 1 with 8 supplyCount, supplyPos 16, and flag 2
G.deckCount = 10, expected = 10
G.handCard = 16, expected = 16
G.handCount = 1, expected = 1
G.discardCount = 0, expected = 0
G.supplyCount = 7, expected = 7
Test player 1 with -1 supplyCount, supplyPos 17, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 18, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 19, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 20, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 21, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 22, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 23, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 24, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 25, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

Test player 1 with -1 supplyCount, supplyPos 26, and flag 2
Supply file is empty or card is not used in game.
  gainCard method return: -1, Expected return -1.

All tests passed!
TESTING discardCard():
Test player 0 with handPos 0, handCount 5 and flag 0
G.playedCards[playedCardCount] = 4, expected = 4
G.playedCardCount = 1, expected = 1 
G.hand[0][0] = 4, expected = 4
G.hand[0][4] = -1, expected = -1
G.handCount[0] = 4, expected = 4
Test player 0 with handPos 1, handCount 5 and flag 0
G.playedCards[playedCardCount] = 4, expected = 4
G.playedCardCount = 1, expected = 1 
G.hand[0][1] = 4, expected = 4
G.hand[0][4] = -1, expected = -1
G.handCount[0] = 4, expected = 4
Test player 0 with handPos 2, handCount 5 and flag 0
G.playedCards[playedCardCount] = 1, expected = 1
G.playedCardCount = 1, expected = 1 
G.hand[0][2] = 4, expected = 4
G.hand[0][4] = -1, expected = -1
G.handCount[0] = 4, expected = 4
Test player 0 with handPos 3, handCount 5 and flag 0
G.playedCards[playedCardCount] = 4, expected = 4
G.playedCardCount = 1, expected = 1 
G.hand[0][3] = 4, expected = 4
G.hand[0][4] = -1, expected = -1
G.handCount[0] = 4, expected = 4
Test player 0 with handPos 4, handCount 5 and flag 0
G.playedCards[playedCardCount] = 4, expected = 4
G.playedCardCount = 1, expected = 1 
G.handCount[p] = 4, expected = 4
The handpos of the played card: -1, expected: -1
Test player 0 with handPos 0, handCount 5 and flag 1
G.hand[0][0] = 4, expected = 4
G.hand[0][4] = -1, expected = -1
G.handCount[0] = 4, expected = 4
Test player 0 with handPos 1, handCount 5 and flag 1
G.hand[0][1] = 4, expected = 4
G.hand[0][4] = -1, expected = -1
G.handCount[0] = 4, expected = 4
Test player 0 with handPos 2, handCount 5 and flag 1
G.hand[0][2] = 4, expected = 4
G.hand[0][4] = -1, expected = -1
G.handCount[0] = 4, expected = 4
Test player 0 with handPos 3, handCount 5 and flag 1
G.hand[0][3] = 4, expected = 4
G.hand[0][4] = -1, expected = -1
G.handCount[0] = 4, expected = 4
Test player 0 with handPos 4, handCount 5 and flag 1
G.handCount[p] = 4, expected = 4
The handpos of the played card: -1, expected: -1
All tests passed!
Testing getCost method...
getCost(0) = 0, expected = 0
getCost(1) = 2, expected = 2
getCost(2) = 5, expected = 5
getCost(3) = 8, expected = 8
getCost(4) = 0, expected = 0
getCost(5) = 3, expected = 3
getCost(6) = 6, expected = 6
getCost(7) = 6, expected = 6
getCost(8) = 5, expected = 5
getCost(9) = 4, expected = 4
getCost(10) = 4, expected = 4
getCost(11) = 5, expected = 5
getCost(12) = 4, expected = 4
getCost(13) = 4, expected = 4
getCost(14) = 3, expected = 3
getCost(15) = 4, expected = 4
getCost(16) = 3, expected = 3
getCost(17) = 5, expected = 5
getCost(18) = 3, expected = 3
getCost(19) = 5, expected = 5
getCost(20) = 3, expected = 3
getCost(21) = 4, expected = 4
getCost(22) = 2, expected = 2
getCost(23) = 5, expected = 5
getCost(24) = 4, expected = 4
getCost(25) = 4, expected = 4
getCost(26) = 4, expected = 4
All tests passed!
TESTING smithyCard():
Test player 0 with 1 card(s) on hand and 0 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 1 card(s) on hand and 1 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 1 card(s) on hand and 2 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 1 card(s) on hand and 3 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 1 card(s) on hand and 4 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 1 card(s) on hand and 5 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 1 card(s) on hand and 6 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 1 card(s) on hand and 7 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 1 card(s) on hand and 8 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 1 card(s) on hand and 9 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 1 card(s) on hand and 10 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 2 card(s) on hand and 0 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 2 card(s) on hand and 1 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 2 card(s) on hand and 2 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 2 card(s) on hand and 3 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 2 card(s) on hand and 4 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 2 card(s) on hand and 5 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 2 card(s) on hand and 6 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 2 card(s) on hand and 7 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 2 card(s) on hand and 8 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 2 card(s) on hand and 9 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 2 card(s) on hand and 10 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 3 card(s) on hand and 0 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 3 card(s) on hand and 1 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 3 card(s) on hand and 2 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 3 card(s) on hand and 3 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 3 card(s) on hand and 4 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 3 card(s) on hand and 5 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 3 card(s) on hand and 6 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 3 card(s) on hand and 7 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 3 card(s) on hand and 8 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 3 card(s) on hand and 9 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 3 card(s) on hand and 10 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 4 card(s) on hand and 0 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 4 card(s) on hand and 1 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 4 card(s) on hand and 2 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 4 card(s) on hand and 3 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 4 card(s) on hand and 4 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 4 card(s) on hand and 5 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 4 card(s) on hand and 6 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 4 card(s) on hand and 7 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 4 card(s) on hand and 8 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 4 card(s) on hand and 9 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 4 card(s) on hand and 10 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 5 card(s) on hand and 0 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 5 card(s) on hand and 1 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 5 card(s) on hand and 2 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 5 card(s) on hand and 3 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 5 card(s) on hand and 4 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 5 card(s) on hand and 5 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 5 card(s) on hand and 6 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 5 card(s) on hand and 7 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 5 card(s) on hand and 8 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 5 card(s) on hand and 9 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 13, expected = 13
Test player 0 with 5 card(s) on hand and 10 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 1 card(s) on hand and 0 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 1 card(s) on hand and 1 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 1 card(s) on hand and 2 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 1 card(s) on hand and 3 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 1 card(s) on hand and 4 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 1 card(s) on hand and 5 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 1 card(s) on hand and 6 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 1 card(s) on hand and 7 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 1 card(s) on hand and 8 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 1 card(s) on hand and 9 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 1 card(s) on hand and 10 playedCardCount.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 2 card(s) on hand and 0 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 2 card(s) on hand and 1 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 2 card(s) on hand and 2 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 2 card(s) on hand and 3 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 2 card(s) on hand and 4 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 2 card(s) on hand and 5 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 2 card(s) on hand and 6 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 2 card(s) on hand and 7 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 2 card(s) on hand and 8 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 2 card(s) on hand and 9 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 2 card(s) on hand and 10 playedCardCount.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 3 card(s) on hand and 0 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 3 card(s) on hand and 1 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 3 card(s) on hand and 2 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 3 card(s) on hand and 3 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 3 card(s) on hand and 4 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 3 card(s) on hand and 5 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 3 card(s) on hand and 6 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 3 card(s) on hand and 7 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 3 card(s) on hand and 8 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 3 card(s) on hand and 9 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 3 card(s) on hand and 10 playedCardCount.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 4 card(s) on hand and 0 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 4 card(s) on hand and 1 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 4 card(s) on hand and 2 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 4 card(s) on hand and 3 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 4 card(s) on hand and 4 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 4 card(s) on hand and 5 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 4 card(s) on hand and 6 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 4 card(s) on hand and 7 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 4 card(s) on hand and 8 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 4 card(s) on hand and 9 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 4 card(s) on hand and 10 playedCardCount.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 5 card(s) on hand and 0 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 5 card(s) on hand and 1 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 5 card(s) on hand and 2 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 5 card(s) on hand and 3 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 5 card(s) on hand and 4 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 5 card(s) on hand and 5 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 5 card(s) on hand and 6 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 5 card(s) on hand and 7 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 5 card(s) on hand and 8 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 5 card(s) on hand and 9 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 13, expected = 13
Test player 1 with 5 card(s) on hand and 10 playedCardCount.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 13, expected = 13
TESTING adventurerCard():
Test player 0 with 1 card(s) on hand, 0 card on deck, and 0 discard card.
G.handCount = -62, expected = 3
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 63, expected = -2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 1 card(s) on hand, 0 card on deck, and 1 discard card.
G.handCount = -62, expected = 3
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 64, expected = -1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 1 card(s) on hand, 0 card on deck, and 2 discard card.
G.handCount = -62, expected = 3
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 65, expected = 0
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 1 card(s) on hand, 0 card on deck, and 3 discard card.
G.handCount = -62, expected = 3
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 66, expected = 1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 1 card(s) on hand, 0 card on deck, and 4 discard card.
G.handCount = -62, expected = 3
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 67, expected = 2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 1 card(s) on hand, 0 card on deck, and 5 discard card.
G.handCount = -62, expected = 3
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 68, expected = 3
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 1 card(s) on hand, 1 card on deck, and 0 discard card.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 0, expected = -1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 1 card(s) on hand, 1 card on deck, and 1 discard card.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 1, expected = 0
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 1 card(s) on hand, 1 card on deck, and 2 discard card.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 2, expected = 1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 1 card(s) on hand, 1 card on deck, and 3 discard card.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 3, expected = 2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 1 card(s) on hand, 1 card on deck, and 4 discard card.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 4, expected = 3
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 1 card(s) on hand, 1 card on deck, and 5 discard card.
G.handCount = 2, expected = 3
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 5, expected = 4
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 1 card(s) on hand, 2 card on deck, and 0 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 0, expected = 0
Test player 0 with 1 card(s) on hand, 2 card on deck, and 1 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 1, expected = 1
Test player 0 with 1 card(s) on hand, 2 card on deck, and 2 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 1 card(s) on hand, 2 card on deck, and 3 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 1 card(s) on hand, 2 card on deck, and 4 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 1 card(s) on hand, 2 card on deck, and 5 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 1 card(s) on hand, 3 card on deck, and 0 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 1, expected = 1
Test player 0 with 1 card(s) on hand, 3 card on deck, and 1 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 1 card(s) on hand, 3 card on deck, and 2 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 1 card(s) on hand, 3 card on deck, and 3 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 1 card(s) on hand, 3 card on deck, and 4 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 1 card(s) on hand, 3 card on deck, and 5 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 1 card(s) on hand, 4 card on deck, and 0 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 1 card(s) on hand, 4 card on deck, and 1 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 1 card(s) on hand, 4 card on deck, and 2 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 1 card(s) on hand, 4 card on deck, and 3 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 1 card(s) on hand, 4 card on deck, and 4 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 1 card(s) on hand, 4 card on deck, and 5 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 7, expected = 7
Test player 0 with 1 card(s) on hand, 5 card on deck, and 0 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 1 card(s) on hand, 5 card on deck, and 1 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 1 card(s) on hand, 5 card on deck, and 2 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 1 card(s) on hand, 5 card on deck, and 3 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 1 card(s) on hand, 5 card on deck, and 4 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 7, expected = 7
Test player 0 with 1 card(s) on hand, 5 card on deck, and 5 discard card.
G.handCount = 3, expected = 3
G.deckCount + G.discardCount = 8, expected = 8
Test player 0 with 2 card(s) on hand, 0 card on deck, and 0 discard card.
G.handCount = -62, expected = 4
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 64, expected = -2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 2 card(s) on hand, 0 card on deck, and 1 discard card.
G.handCount = -62, expected = 4
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 65, expected = -1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 2 card(s) on hand, 0 card on deck, and 2 discard card.
G.handCount = -62, expected = 4
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 66, expected = 0
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 2 card(s) on hand, 0 card on deck, and 3 discard card.
G.handCount = -62, expected = 4
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 67, expected = 1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 2 card(s) on hand, 0 card on deck, and 4 discard card.
G.handCount = -62, expected = 4
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 68, expected = 2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 2 card(s) on hand, 0 card on deck, and 5 discard card.
G.handCount = -62, expected = 4
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 69, expected = 3
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 2 card(s) on hand, 1 card on deck, and 0 discard card.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 0, expected = -1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 2 card(s) on hand, 1 card on deck, and 1 discard card.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 1, expected = 0
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 2 card(s) on hand, 1 card on deck, and 2 discard card.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 2, expected = 1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 2 card(s) on hand, 1 card on deck, and 3 discard card.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 3, expected = 2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 2 card(s) on hand, 1 card on deck, and 4 discard card.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 4, expected = 3
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 2 card(s) on hand, 1 card on deck, and 5 discard card.
G.handCount = 3, expected = 4
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 5, expected = 4
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 2 card(s) on hand, 2 card on deck, and 0 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 0, expected = 0
Test player 0 with 2 card(s) on hand, 2 card on deck, and 1 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 1, expected = 1
Test player 0 with 2 card(s) on hand, 2 card on deck, and 2 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 2 card(s) on hand, 2 card on deck, and 3 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 2 card(s) on hand, 2 card on deck, and 4 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 2 card(s) on hand, 2 card on deck, and 5 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 2 card(s) on hand, 3 card on deck, and 0 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 1, expected = 1
Test player 0 with 2 card(s) on hand, 3 card on deck, and 1 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 2 card(s) on hand, 3 card on deck, and 2 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 2 card(s) on hand, 3 card on deck, and 3 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 2 card(s) on hand, 3 card on deck, and 4 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 2 card(s) on hand, 3 card on deck, and 5 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 2 card(s) on hand, 4 card on deck, and 0 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 2 card(s) on hand, 4 card on deck, and 1 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 2 card(s) on hand, 4 card on deck, and 2 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 2 card(s) on hand, 4 card on deck, and 3 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 2 card(s) on hand, 4 card on deck, and 4 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 2 card(s) on hand, 4 card on deck, and 5 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 7, expected = 7
Test player 0 with 2 card(s) on hand, 5 card on deck, and 0 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 2 card(s) on hand, 5 card on deck, and 1 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 2 card(s) on hand, 5 card on deck, and 2 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 2 card(s) on hand, 5 card on deck, and 3 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 2 card(s) on hand, 5 card on deck, and 4 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 7, expected = 7
Test player 0 with 2 card(s) on hand, 5 card on deck, and 5 discard card.
G.handCount = 4, expected = 4
G.deckCount + G.discardCount = 8, expected = 8
Test player 0 with 3 card(s) on hand, 0 card on deck, and 0 discard card.
G.handCount = -62, expected = 5
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 65, expected = -2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 3 card(s) on hand, 0 card on deck, and 1 discard card.
G.handCount = -62, expected = 5
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 66, expected = -1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 3 card(s) on hand, 0 card on deck, and 2 discard card.
G.handCount = -62, expected = 5
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 67, expected = 0
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 3 card(s) on hand, 0 card on deck, and 3 discard card.
G.handCount = -62, expected = 5
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 68, expected = 1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 3 card(s) on hand, 0 card on deck, and 4 discard card.
G.handCount = -62, expected = 5
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 69, expected = 2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 3 card(s) on hand, 0 card on deck, and 5 discard card.
G.handCount = -62, expected = 5
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 70, expected = 3
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 3 card(s) on hand, 1 card on deck, and 0 discard card.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 0, expected = -1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 3 card(s) on hand, 1 card on deck, and 1 discard card.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 1, expected = 0
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 3 card(s) on hand, 1 card on deck, and 2 discard card.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 2, expected = 1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 3 card(s) on hand, 1 card on deck, and 3 discard card.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 3, expected = 2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 3 card(s) on hand, 1 card on deck, and 4 discard card.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 4, expected = 3
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 3 card(s) on hand, 1 card on deck, and 5 discard card.
G.handCount = 4, expected = 5
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 5, expected = 4
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 3 card(s) on hand, 2 card on deck, and 0 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 0, expected = 0
Test player 0 with 3 card(s) on hand, 2 card on deck, and 1 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 1, expected = 1
Test player 0 with 3 card(s) on hand, 2 card on deck, and 2 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 3 card(s) on hand, 2 card on deck, and 3 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 3 card(s) on hand, 2 card on deck, and 4 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 3 card(s) on hand, 2 card on deck, and 5 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 3 card(s) on hand, 3 card on deck, and 0 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 1, expected = 1
Test player 0 with 3 card(s) on hand, 3 card on deck, and 1 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 3 card(s) on hand, 3 card on deck, and 2 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 3 card(s) on hand, 3 card on deck, and 3 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 3 card(s) on hand, 3 card on deck, and 4 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 3 card(s) on hand, 3 card on deck, and 5 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 3 card(s) on hand, 4 card on deck, and 0 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 3 card(s) on hand, 4 card on deck, and 1 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 3 card(s) on hand, 4 card on deck, and 2 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 3 card(s) on hand, 4 card on deck, and 3 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 3 card(s) on hand, 4 card on deck, and 4 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 3 card(s) on hand, 4 card on deck, and 5 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 7, expected = 7
Test player 0 with 3 card(s) on hand, 5 card on deck, and 0 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 3 card(s) on hand, 5 card on deck, and 1 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 3 card(s) on hand, 5 card on deck, and 2 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 3 card(s) on hand, 5 card on deck, and 3 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 3 card(s) on hand, 5 card on deck, and 4 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 7, expected = 7
Test player 0 with 3 card(s) on hand, 5 card on deck, and 5 discard card.
G.handCount = 5, expected = 5
G.deckCount + G.discardCount = 8, expected = 8
Test player 0 with 4 card(s) on hand, 0 card on deck, and 0 discard card.
G.handCount = -62, expected = 6
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 66, expected = -2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 4 card(s) on hand, 0 card on deck, and 1 discard card.
G.handCount = -62, expected = 6
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 67, expected = -1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 4 card(s) on hand, 0 card on deck, and 2 discard card.
G.handCount = -62, expected = 6
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 68, expected = 0
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 4 card(s) on hand, 0 card on deck, and 3 discard card.
G.handCount = -62, expected = 6
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 69, expected = 1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 4 card(s) on hand, 0 card on deck, and 4 discard card.
G.handCount = -62, expected = 6
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 70, expected = 2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 4 card(s) on hand, 0 card on deck, and 5 discard card.
G.handCount = -62, expected = 6
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 71, expected = 3
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 4 card(s) on hand, 1 card on deck, and 0 discard card.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 0, expected = -1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 4 card(s) on hand, 1 card on deck, and 1 discard card.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 1, expected = 0
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 4 card(s) on hand, 1 card on deck, and 2 discard card.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 2, expected = 1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 4 card(s) on hand, 1 card on deck, and 3 discard card.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 3, expected = 2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 4 card(s) on hand, 1 card on deck, and 4 discard card.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 4, expected = 3
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 4 card(s) on hand, 1 card on deck, and 5 discard card.
G.handCount = 5, expected = 6
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 5, expected = 4
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 4 card(s) on hand, 2 card on deck, and 0 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 0, expected = 0
Test player 0 with 4 card(s) on hand, 2 card on deck, and 1 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 1, expected = 1
Test player 0 with 4 card(s) on hand, 2 card on deck, and 2 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 4 card(s) on hand, 2 card on deck, and 3 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 4 card(s) on hand, 2 card on deck, and 4 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 4 card(s) on hand, 2 card on deck, and 5 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 4 card(s) on hand, 3 card on deck, and 0 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 1, expected = 1
Test player 0 with 4 card(s) on hand, 3 card on deck, and 1 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 4 card(s) on hand, 3 card on deck, and 2 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 4 card(s) on hand, 3 card on deck, and 3 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 4 card(s) on hand, 3 card on deck, and 4 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 4 card(s) on hand, 3 card on deck, and 5 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 4 card(s) on hand, 4 card on deck, and 0 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 4 card(s) on hand, 4 card on deck, and 1 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 4 card(s) on hand, 4 card on deck, and 2 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 4 card(s) on hand, 4 card on deck, and 3 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 4 card(s) on hand, 4 card on deck, and 4 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 4 card(s) on hand, 4 card on deck, and 5 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 7, expected = 7
Test player 0 with 4 card(s) on hand, 5 card on deck, and 0 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 4 card(s) on hand, 5 card on deck, and 1 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 4 card(s) on hand, 5 card on deck, and 2 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 4 card(s) on hand, 5 card on deck, and 3 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 4 card(s) on hand, 5 card on deck, and 4 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 7, expected = 7
Test player 0 with 4 card(s) on hand, 5 card on deck, and 5 discard card.
G.handCount = 6, expected = 6
G.deckCount + G.discardCount = 8, expected = 8
Test player 0 with 5 card(s) on hand, 0 card on deck, and 0 discard card.
G.handCount = -62, expected = 7
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 67, expected = -2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 5 card(s) on hand, 0 card on deck, and 1 discard card.
G.handCount = -62, expected = 7
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 68, expected = -1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 5 card(s) on hand, 0 card on deck, and 2 discard card.
G.handCount = -62, expected = 7
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 69, expected = 0
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 5 card(s) on hand, 0 card on deck, and 3 discard card.
G.handCount = -62, expected = 7
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 70, expected = 1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 5 card(s) on hand, 0 card on deck, and 4 discard card.
G.handCount = -62, expected = 7
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 71, expected = 2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 5 card(s) on hand, 0 card on deck, and 5 discard card.
G.handCount = -62, expected = 7
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 72, expected = 3
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 5 card(s) on hand, 1 card on deck, and 0 discard card.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 0, expected = -1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 5 card(s) on hand, 1 card on deck, and 1 discard card.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 1, expected = 0
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 5 card(s) on hand, 1 card on deck, and 2 discard card.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 2, expected = 1
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 5 card(s) on hand, 1 card on deck, and 3 discard card.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 3, expected = 2
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 5 card(s) on hand, 1 card on deck, and 4 discard card.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 4, expected = 3
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 5 card(s) on hand, 1 card on deck, and 5 discard card.
G.handCount = 6, expected = 7
FAIL, G.handCount is not as expected.
G.deckCount + G.discardCount = 5, expected = 4
FAIL, the amount of card in deck and discard pile are not as expected.
Test player 0 with 5 card(s) on hand, 2 card on deck, and 0 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 0, expected = 0
Test player 0 with 5 card(s) on hand, 2 card on deck, and 1 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 1, expected = 1
Test player 0 with 5 card(s) on hand, 2 card on deck, and 2 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 5 card(s) on hand, 2 card on deck, and 3 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 5 card(s) on hand, 2 card on deck, and 4 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 5 card(s) on hand, 2 card on deck, and 5 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 5 card(s) on hand, 3 card on deck, and 0 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 1, expected = 1
Test player 0 with 5 card(s) on hand, 3 card on deck, and 1 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 5 card(s) on hand, 3 card on deck, and 2 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 5 card(s) on hand, 3 card on deck, and 3 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 5 card(s) on hand, 3 card on deck, and 4 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 5 card(s) on hand, 3 card on deck, and 5 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 5 card(s) on hand, 4 card on deck, and 0 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 2, expected = 2
Test player 0 with 5 card(s) on hand, 4 card on deck, and 1 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 5 card(s) on hand, 4 card on deck, and 2 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 5 card(s) on hand, 4 card on deck, and 3 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 5 card(s) on hand, 4 card on deck, and 4 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 5 card(s) on hand, 4 card on deck, and 5 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 7, expected = 7
Test player 0 with 5 card(s) on hand, 5 card on deck, and 0 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 3, expected = 3
Test player 0 with 5 card(s) on hand, 5 card on deck, and 1 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 4, expected = 4
Test player 0 with 5 card(s) on hand, 5 card on deck, and 2 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 5, expected = 5
Test player 0 with 5 card(s) on hand, 5 card on deck, and 3 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 6, expected = 6
Test player 0 with 5 card(s) on hand, 5 card on deck, and 4 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 7, expected = 7
Test player 0 with 5 card(s) on hand, 5 card on deck, and 5 discard card.
G.handCount = 7, expected = 7
G.deckCount + G.discardCount = 8, expected = 8
TESTING villageCard():
Test player 0 with 1 card(s) on hand and 0 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 1 card(s) on hand and 1 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 1 card(s) on hand and 2 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 1 card(s) on hand and 3 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 1 card(s) on hand and 4 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 1 card(s) on hand and 5 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 1 card(s) on hand and 6 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 1 card(s) on hand and 7 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 1 card(s) on hand and 8 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 1 card(s) on hand and 9 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 1 card(s) on hand and 10 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 2 card(s) on hand and 0 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 2 card(s) on hand and 1 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 2 card(s) on hand and 2 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 2 card(s) on hand and 3 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 2 card(s) on hand and 4 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 2 card(s) on hand and 5 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 2 card(s) on hand and 6 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 2 card(s) on hand and 7 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 2 card(s) on hand and 8 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 2 card(s) on hand and 9 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 2 card(s) on hand and 10 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 3 card(s) on hand and 0 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 3 card(s) on hand and 1 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 3 card(s) on hand and 2 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 3 card(s) on hand and 3 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 3 card(s) on hand and 4 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 3 card(s) on hand and 5 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 3 card(s) on hand and 6 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 3 card(s) on hand and 7 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 3 card(s) on hand and 8 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 3 card(s) on hand and 9 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 3 card(s) on hand and 10 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 4 card(s) on hand and 0 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 4 card(s) on hand and 1 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 4 card(s) on hand and 2 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 4 card(s) on hand and 3 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 4 card(s) on hand and 4 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 4 card(s) on hand and 5 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 4 card(s) on hand and 6 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 4 card(s) on hand and 7 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 4 card(s) on hand and 8 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 4 card(s) on hand and 9 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 4 card(s) on hand and 10 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 5 card(s) on hand and 0 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 5 card(s) on hand and 1 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 5 card(s) on hand and 2 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 5 card(s) on hand and 3 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 5 card(s) on hand and 4 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 5 card(s) on hand and 5 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 5 card(s) on hand and 6 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 5 card(s) on hand and 7 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 5 card(s) on hand and 8 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 5 card(s) on hand and 9 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 0 with 5 card(s) on hand and 10 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 1 card(s) on hand and 0 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 1 card(s) on hand and 1 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 1 card(s) on hand and 2 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 1 card(s) on hand and 3 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 1 card(s) on hand and 4 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 1 card(s) on hand and 5 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 1 card(s) on hand and 6 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 1 card(s) on hand and 7 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 1 card(s) on hand and 8 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 1 card(s) on hand and 9 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 1 card(s) on hand and 10 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 2 card(s) on hand and 0 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 2 card(s) on hand and 1 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 2 card(s) on hand and 2 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 2 card(s) on hand and 3 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 2 card(s) on hand and 4 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 2 card(s) on hand and 5 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 2 card(s) on hand and 6 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 2 card(s) on hand and 7 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 2 card(s) on hand and 8 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 2 card(s) on hand and 9 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 2 card(s) on hand and 10 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 3 card(s) on hand and 0 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 3 card(s) on hand and 1 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 3 card(s) on hand and 2 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 3 card(s) on hand and 3 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 3 card(s) on hand and 4 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 3 card(s) on hand and 5 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 3 card(s) on hand and 6 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 3 card(s) on hand and 7 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 3 card(s) on hand and 8 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 3 card(s) on hand and 9 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 3 card(s) on hand and 10 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 4 card(s) on hand and 0 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 4 card(s) on hand and 1 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 4 card(s) on hand and 2 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 4 card(s) on hand and 3 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 4 card(s) on hand and 4 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 4 card(s) on hand and 5 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 4 card(s) on hand and 6 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 4 card(s) on hand and 7 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 4 card(s) on hand and 8 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 4 card(s) on hand and 9 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 4 card(s) on hand and 10 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 5 card(s) on hand and 0 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 5 card(s) on hand and 1 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 5 card(s) on hand and 2 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 5 card(s) on hand and 3 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 5 card(s) on hand and 4 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 5 card(s) on hand and 5 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 5 card(s) on hand and 6 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 5 card(s) on hand and 7 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 5 card(s) on hand and 8 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 5 card(s) on hand and 9 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
Test player 1 with 5 card(s) on hand and 10 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 14, expected = 14
G.numActions = 2, expected = 3
FAIL, numActions is not as expected.
TESTING great_hallCard():
Test player 0 with 1 card(s) on hand and 0 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 1 card(s) on hand and 1 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 1 card(s) on hand and 2 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 1 card(s) on hand and 3 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 1 card(s) on hand and 4 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 1 card(s) on hand and 5 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 1 card(s) on hand and 6 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 1 card(s) on hand and 7 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 1 card(s) on hand and 8 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 1 card(s) on hand and 9 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 1 card(s) on hand and 10 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 2 card(s) on hand and 0 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 2 card(s) on hand and 1 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 2 card(s) on hand and 2 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 2 card(s) on hand and 3 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 2 card(s) on hand and 4 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 2 card(s) on hand and 5 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 2 card(s) on hand and 6 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 2 card(s) on hand and 7 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 2 card(s) on hand and 8 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 2 card(s) on hand and 9 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 2 card(s) on hand and 10 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 3 card(s) on hand and 0 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 3 card(s) on hand and 1 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 3 card(s) on hand and 2 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 3 card(s) on hand and 3 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 3 card(s) on hand and 4 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 3 card(s) on hand and 5 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 3 card(s) on hand and 6 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 3 card(s) on hand and 7 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 3 card(s) on hand and 8 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 3 card(s) on hand and 9 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 3 card(s) on hand and 10 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 4 card(s) on hand and 0 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 4 card(s) on hand and 1 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 4 card(s) on hand and 2 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 4 card(s) on hand and 3 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 4 card(s) on hand and 4 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 4 card(s) on hand and 5 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 4 card(s) on hand and 6 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 4 card(s) on hand and 7 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 4 card(s) on hand and 8 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 4 card(s) on hand and 9 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 4 card(s) on hand and 10 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 5 card(s) on hand and 0 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 5 card(s) on hand and 1 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 5 card(s) on hand and 2 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 5 card(s) on hand and 3 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 5 card(s) on hand and 4 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 5 card(s) on hand and 5 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 5 card(s) on hand and 6 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 5 card(s) on hand and 7 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 5 card(s) on hand and 8 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 5 card(s) on hand and 9 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 0 with 5 card(s) on hand and 10 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 1 card(s) on hand and 0 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 1 card(s) on hand and 1 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 1 card(s) on hand and 2 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 1 card(s) on hand and 3 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 1 card(s) on hand and 4 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 1 card(s) on hand and 5 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 1 card(s) on hand and 6 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 1 card(s) on hand and 7 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 1 card(s) on hand and 8 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 1 card(s) on hand and 9 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 1 card(s) on hand and 10 playedCardCount.
G.handCount = 1, expected = 1
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 2 card(s) on hand and 0 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 2 card(s) on hand and 1 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 2 card(s) on hand and 2 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 2 card(s) on hand and 3 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 2 card(s) on hand and 4 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 2 card(s) on hand and 5 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 2 card(s) on hand and 6 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 2 card(s) on hand and 7 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 2 card(s) on hand and 8 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 2 card(s) on hand and 9 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 2 card(s) on hand and 10 playedCardCount.
G.handCount = 2, expected = 2
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 3 card(s) on hand and 0 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 3 card(s) on hand and 1 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 3 card(s) on hand and 2 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 3 card(s) on hand and 3 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 3 card(s) on hand and 4 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 3 card(s) on hand and 5 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 3 card(s) on hand and 6 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 3 card(s) on hand and 7 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 3 card(s) on hand and 8 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 3 card(s) on hand and 9 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 3 card(s) on hand and 10 playedCardCount.
G.handCount = 3, expected = 3
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 4 card(s) on hand and 0 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 4 card(s) on hand and 1 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 4 card(s) on hand and 2 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 4 card(s) on hand and 3 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 4 card(s) on hand and 4 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 4 card(s) on hand and 5 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 4 card(s) on hand and 6 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 4 card(s) on hand and 7 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 4 card(s) on hand and 8 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 4 card(s) on hand and 9 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 4 card(s) on hand and 10 playedCardCount.
G.handCount = 4, expected = 4
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 5 card(s) on hand and 0 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 1, expected = 1
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 5 card(s) on hand and 1 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 2, expected = 2
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 5 card(s) on hand and 2 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 3, expected = 3
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 5 card(s) on hand and 3 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 4, expected = 4
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 5 card(s) on hand and 4 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 5, expected = 5
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 5 card(s) on hand and 5 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 6, expected = 6
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 5 card(s) on hand and 6 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 7, expected = 7
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 5 card(s) on hand and 7 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 8, expected = 8
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 5 card(s) on hand and 8 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 9, expected = 9
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 5 card(s) on hand and 9 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 10, expected = 10
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
Test player 1 with 5 card(s) on hand and 10 playedCardCount.
G.handCount = 5, expected = 5
G.playedCardCount = 11, expected = 11
G.playedCards[playedCardCount] = 16, expected = 16
G.numActions = 2, expected = 2
All tests passed!
File 'dominion.c'
Lines executed:35.63% of 581
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/* instructor comments: file is updated. */
    #####:    9:int dummymethod()
        -:   10:{
    #####:   11:	return 0;
        -:   12:}
    24660:   13:int compare(const void* a, const void* b) {
    24660:   14:  if (*(int*)a > *(int*)b)
    #####:   15:    return 1;
    24660:   16:  if (*(int*)a < *(int*)b)
     6544:   17:    return -1;
    18116:   18:  return 0;
        -:   19:}
        -:   20:
    #####:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
    #####:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
    #####:   28:  int* k = malloc(10 * sizeof(int));
    #####:   29:  k[0] = k1;
    #####:   30:  k[1] = k2;
    #####:   31:  k[2] = k3;
    #####:   32:  k[3] = k4;
    #####:   33:  k[4] = k5;
    #####:   34:  k[5] = k6;
    #####:   35:  k[6] = k7;
    #####:   36:  k[7] = k8;
    #####:   37:  k[8] = k9;
    #####:   38:  k[9] = k10;
    #####:   39:  return k;
        -:   40:}
        -:   41:
      818:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;			
        -:   48:  //set up random number generator
      818:   49:  SelectStream(1);
      818:   50:  PutSeed((long)randomSeed);
        -:   51:  
        -:   52:  //check number of players
      818:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   54:    {
    #####:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
      818:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
     8998:   62:  for (i = 0; i < 10; i++)
        -:   63:    {
    89980:   64:      for (j = 0; j < 10; j++)
        -:   65:        {
    81800:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   67:	    {
    #####:   68:	      return -1;
        -:   69:	    }
        -:   70:        }
        -:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
      818:   78:  if (numPlayers == 2)
        -:   79:    {
      818:   80:      state->supplyCount[curse] = 10;
        -:   81:    }
    #####:   82:  else if (numPlayers == 3)
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 20;
        -:   85:    }
        -:   86:  else
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
      818:   92:  if (numPlayers == 2)
        -:   93:    {
      818:   94:      state->supplyCount[estate] = 8;
      818:   95:      state->supplyCount[duchy] = 8;
      818:   96:      state->supplyCount[province] = 8;
        -:   97:    }
        -:   98:  else
        -:   99:    {
    #####:  100:      state->supplyCount[estate] = 12;
    #####:  101:      state->supplyCount[duchy] = 12;
    #####:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
      818:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      818:  107:  state->supplyCount[silver] = 40;
      818:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
    17178:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  112:    {
   134970:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  114:	{
   126790:  115:	  if (kingdomCards[j] == i)
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
     9816:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  119:		{
     1636:  120:		  if (numPlayers == 2){ 
     1636:  121:		    state->supplyCount[i] = 8; 
        -:  122:		  }
    #####:  123:		  else{ state->supplyCount[i] = 12; }
        -:  124:		}
        -:  125:	      else
        -:  126:		{
     6544:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
     8180:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
   118610:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
        -:  135:	}
        -:  136:
        -:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
     2454:  143:  for (i = 0; i < numPlayers; i++)
        -:  144:    {
     1636:  145:      state->deckCount[i] = 0;
     6544:  146:      for (j = 0; j < 3; j++)
        -:  147:	{
     4908:  148:	  state->deck[i][j] = estate;
     4908:  149:	  state->deckCount[i]++;
        -:  150:	}
    13088:  151:      for (j = 3; j < 10; j++)
        -:  152:	{
    11452:  153:	  state->deck[i][j] = copper;
    11452:  154:	  state->deckCount[i]++;		
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
     2454:  159:  for (i = 0; i < numPlayers; i++)
        -:  160:    {
     1636:  161:      if ( shuffle(i, state) < 0 )
        -:  162:	{
    #####:  163:	  return -1;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //draw player hands
     2454:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {  
        -:  170:      //initialize hand size to zero
     1636:  171:      state->handCount[i] = 0;
     1636:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
        -:  178:    }
        -:  179:  
        -:  180:  //set embargo tokens to 0 for all supply piles
    22904:  181:  for (i = 0; i <= treasure_map; i++)
        -:  182:    {
    22086:  183:      state->embargoTokens[i] = 0;
        -:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
      818:  187:  state->outpostPlayed = 0;
      818:  188:  state->phase = 0;
      818:  189:  state->numActions = 1;
      818:  190:  state->numBuys = 1;
      818:  191:  state->playedCardCount = 0;
      818:  192:  state->whoseTurn = 0;
      818:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
     4908:  197:  for (it = 0; it < 5; it++){
     4090:  198:    drawCard(state->whoseTurn, state);
        -:  199:  }
        -:  200:
      818:  201:  updateCoins(state->whoseTurn, state, 0);
        -:  202:
      818:  203:  return 0;
        -:  204:}
        -:  205:
     5646:  206:int shuffle(int player, struct gameState *state) {
        -:  207: 
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
     5646:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
     5646:  214:  if (state->deckCount[player] < 1)
     3960:  215:    return -1;
     1686:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
    19882:  219:  while (state->deckCount[player] > 0) {
    16510:  220:    card = floor(Random() * state->deckCount[player]);
    16510:  221:    newDeck[newDeckPos] = state->deck[player][card];
    16510:  222:    newDeckPos++;
    57590:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
    41080:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
    16510:  226:    state->deckCount[player]--;
        -:  227:  }
    18196:  228:  for (i = 0; i < newDeckPos; i++) {
    16510:  229:    state->deck[player][i] = newDeck[i];
    16510:  230:    state->deckCount[player]++;
        -:  231:  }
        -:  232:
     1686:  233:  return 0;
        -:  234:}
        -:  235:
    #####:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  237:{	
        -:  238:  int card;
    #####:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
    #####:  242:  if (state->phase != 0)
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //check if player has enough actions
    #####:  248:  if ( state->numActions < 1 )
        -:  249:    {
    #####:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //get card played
    #####:  254:  card = handCard(handPos, state);
        -:  255:	
        -:  256:  //check if selected card is an action
    #####:  257:  if ( card < adventurer || card > treasure_map )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //play card
    #####:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:	
        -:  268:  //reduce number of actions
    #####:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
    #####:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  273:	
    #####:  274:  return 0;
        -:  275:}
        -:  276:
    #####:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
    #####:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
    #####:  285:  who = state->whoseTurn;
        -:  286:
    #####:  287:  if (state->numBuys < 1){
    #####:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (supplyCount(supplyPos, state) <1){
    #####:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (state->coins < getCost(supplyPos)){
    #####:  296:    if (DEBUG) 
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
    #####:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
    #####:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:  
    #####:  304:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:    state->numBuys--;
    #####:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:    
    #####:  313:  return 0;
        -:  314:}
        -:  315:
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:  return state->handCount[ whoseTurn(state) ];
        -:  318:}
        -:  319:
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:  int currentPlayer = whoseTurn(state);
    #####:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
      222:  325:int supplyCount(int card, struct gameState *state) {
      222:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
    #####:  331:  int count = 0;
        -:  332:
    #####:  333:  for (i = 0; i < state->deckCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->deck[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->handCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->hand[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->discardCount[player]; i++)
        -:  344:    {
    #####:  345:      if (state->discard[player][i] == card) count++;
        -:  346:    }
        -:  347:
    #####:  348:  return count;
        -:  349:}
        -:  350:
      180:  351:int whoseTurn(struct gameState *state) {
      180:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
    #####:  358:  int currentPlayer = whoseTurn(state);
        -:  359:  
        -:  360:  //Discard hand
    #####:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:  }
    #####:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:    
        -:  367:  //Code for determining the player
    #####:  368:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:  }
        -:  371:  else{
    #####:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
    #####:  375:  state->outpostPlayed = 0;
    #####:  376:  state->phase = 0;
    #####:  377:  state->numActions = 1;
    #####:  378:  state->coins = 0;
    #####:  379:  state->numBuys = 1;
    #####:  380:  state->playedCardCount = 0;
    #####:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
    #####:  385:  for (k = 0; k < 5; k++){
    #####:  386:    drawCard(state->whoseTurn, state);//Draw a card
        -:  387:  }
        -:  388:
        -:  389:  //Update money
    #####:  390:  updateCoins(state->whoseTurn, state , 0);
        -:  391:
    #####:  392:  return 0;
        -:  393:}
        -:  394:
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:	
        -:  399:  //if stack of Province cards is empty, the game ends
    #####:  400:  if (state->supplyCount[province] == 0)
        -:  401:    {
    #####:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
    #####:  406:  j = 0;
    #####:  407:  for (i = 0; i < 25; i++)
        -:  408:    {
    #####:  409:      if (state->supplyCount[i] == 0)
        -:  410:	{
    #####:  411:	  j++;
        -:  412:	}
        -:  413:    }
    #####:  414:  if ( j >= 3)
        -:  415:    {
    #####:  416:      return 1;
        -:  417:    }
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
    #####:  425:  int score = 0;
        -:  426:  //score from hand
    #####:  427:  for (i = 0; i < state->handCount[player]; i++)
        -:  428:    {
    #####:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  432:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  434:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  435:    }
        -:  436:
        -:  437:  //score from discard
    #####:  438:  for (i = 0; i < state->discardCount[player]; i++)
        -:  439:    {
    #####:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  443:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  445:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  446:    }
        -:  447:
        -:  448:  //score from deck
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
    #####:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  454:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  456:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  457:    }
        -:  458:
    #####:  459:  return score;
        -:  460:}
        -:  461:
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;	
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
        -:  473:	{
    #####:  474:	  players[i] = -9999;
        -:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
        -:  479:	}
        -:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
        -:  487:	{
    #####:  488:	  j = i;
        -:  489:	}
        -:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
        -:  498:	{
    #####:  499:	  players[i]++;
        -:  500:	}
        -:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
        -:  508:	{
    #####:  509:	  j = i;
        -:  510:	}
        -:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
        -:  518:	{
    #####:  519:	  players[i] = 1;
        -:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
        -:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
     6990:  530:int drawCard(int player, struct gameState *state)
        -:  531:{	int count;
        -:  532:  int deckCounter;
     6990:  533:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  534:    
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
        -:  536:    int i;
        -:  537:    //Move discard to deck
     2240:  538:    for (i = 0; i < state->discardCount[player];i++){
      150:  539:      state->deck[player][i] = state->discard[player][i];
      150:  540:      state->discard[player][i] = -1;
        -:  541:    }
        -:  542:
     2090:  543:    state->deckCount[player] = state->discardCount[player];
     2090:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
     2090:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  548:   
     2090:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:    
     2090:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
     2090:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:    
     2090:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:    
     2090:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
     2090:  564:    if (deckCounter == 0)
     2040:  565:      return -1;
        -:  566:
       50:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       50:  568:    state->deckCount[player]--;
       50:  569:    state->handCount[player]++;//Increment hand count
        -:  570:  }
        -:  571:
        -:  572:  else{
     4900:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
     4900:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
     4900:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
     4900:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4900:  581:    state->deckCount[player]--;
     4900:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
     4950:  585:  return 0;
        -:  586:}
        -:  587:
       54:  588:int getCost(int cardNumber)
        -:  589:{
       54:  590:  switch( cardNumber ) 
        -:  591:    {
        -:  592:    case curse:
        2:  593:      return 0;
        -:  594:    case estate:
        2:  595:      return 2;
        -:  596:    case duchy:
        2:  597:      return 5;
        -:  598:    case province:
        2:  599:      return 8;
        -:  600:    case copper:
        2:  601:      return 0;
        -:  602:    case silver:
        2:  603:      return 3;
        -:  604:    case gold:
        2:  605:      return 6;
        -:  606:    case adventurer:
        2:  607:      return 6;
        -:  608:    case council_room:
        2:  609:      return 5;
        -:  610:    case feast:
        2:  611:      return 4;
        -:  612:    case gardens:
        2:  613:      return 4;
        -:  614:    case mine:
        2:  615:      return 5;
        -:  616:    case remodel:
        2:  617:      return 4;
        -:  618:    case smithy:
        2:  619:      return 4;
        -:  620:    case village:
        2:  621:      return 3;
        -:  622:    case baron:
        2:  623:      return 4;
        -:  624:    case great_hall:
        2:  625:      return 3;
        -:  626:    case minion:
        2:  627:      return 5;
        -:  628:    case steward:
        2:  629:      return 3;
        -:  630:    case tribute:
        2:  631:      return 5;
        -:  632:    case ambassador:
        2:  633:      return 3;
        -:  634:    case cutpurse:
        2:  635:      return 4;
        -:  636:    case embargo: 
        2:  637:      return 2;
        -:  638:    case outpost:
        2:  639:      return 5;
        -:  640:    case salvager:
        2:  641:      return 4;
        -:  642:    case sea_hag:
        2:  643:      return 4;
        -:  644:    case treasure_map:
        2:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
        -:  649:}
        -:  650:
        -:  651://Refacotr: Implement adventurer card method here.
      180:  652:void adventurerCard(struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND]){
      180:  653:     int drawntreasure=0;
      180:  654:     int z=0;// this is the counter for the temp hand
     2820:  655:     while(drawntreasure<2){
     2460:  656:        if (state->handCount[currentPlayer] <1){//if the hand is empty we need to shuffle discard and add to deck
     1920:  657:          shuffle(currentPlayer, state);
        -:  658:        }
     2460:  659:        drawCard(currentPlayer, state);
     2460:  660:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     2820:  661:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      360:  662:          drawntreasure++;
        -:  663:        else{
     2100:  664:          temphand[z]=cardDrawn;
     2100:  665:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     2100:  666:          z++;
        -:  667:        }
        -:  668:      }
     2460:  669:      while(z-1>=0){
     2100:  670:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     2100:  671:        z=z-1;
        -:  672:      }
      180:  673:}
        -:  674:
        -:  675://refactor: Implement smithy card method here
      110:  676:void smithyCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag){
        -:  677:   int i;
      330:  678:   for (i = 1; i < 3; i++)
        -:  679:   {
      220:  680:      drawCard(currentPlayer, state);
        -:  681:   }
        -:  682:			
        -:  683:   //discard card from hand
      110:  684:   discardCard(handPos, currentPlayer, state, 0);
      110:  685:}
        -:  686:
        -:  687://refactor: Implement council room card method here
    #####:  688:void councilRoomCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag){
        -:  689:   int i;
    #####:  690:   for (i = 0; i < 4; i++)
        -:  691:   {
    #####:  692:     drawCard(currentPlayer, state);
        -:  693:   }
        -:  694:			
        -:  695:      //+1 Buy
    #####:  696:      state->numBuys++;
        -:  697:			
        -:  698:      //Each other player draws a card
    #####:  699:      for (i = 0; i < state->numPlayers; i++)
        -:  700:	{
    #####:  701:	      drawCard(i, state);
        -:  702:	}
        -:  703:			
        -:  704:      //put played card in played card pile
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
    #####:  706:}
        -:  707:
        -:  708://refactor: Implement village card method here
      110:  709:void villageCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag){
        -:  710:      //+1 Card
      110:  711:      drawCard(currentPlayer, state);
        -:  712:
        -:  713:      //+ Actions
      110:  714:      state->numActions = state->numActions++;
        -:  715:
        -:  716:      //discard played card from hand
      110:  717:      discardCard(handPos, currentPlayer, state, 0);
      110:  718:}
        -:  719:
        -:  720://refactor: Implement great_hall card method here
      110:  721:void greatHallCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag){
        -:  722:      //+1 Card
      110:  723:      drawCard(currentPlayer, state);
        -:  724:
        -:  725:      //+ Actions
      110:  726:      state->numActions = state->numActions++;
        -:  727:
        -:  728:      //discard played card from hand
      110:  729:      discardCard(handPos, currentPlayer, state, 0);
      110:  730:}
        -:  731:
        -:  732:
      180:  733:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  734:{
        -:  735:  int i;
        -:  736:  int j;
        -:  737:  int k;
        -:  738:  int x;
        -:  739:  int index;
      180:  740:  int currentPlayer = whoseTurn(state);
      180:  741:  int nextPlayer = currentPlayer + 1;
        -:  742:
      180:  743:  int tributeRevealedCards[2] = {-1, -1};
        -:  744:  int temphand[MAX_HAND];// moved above the if statement
        -:  745:  int cardDrawn;
      180:  746:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  747:    nextPlayer = 0;
        -:  748:  }
        -:  749:  
        -:  750:	
        -:  751:  //uses switch to select card and perform actions
      180:  752:  switch( card ) 
        -:  753:    {
        -:  754:    case adventurer:
        -:  755:      //Refactor: call adventurer card method here
      180:  756:      adventurerCard(state, currentPlayer, cardDrawn, temphand);
      180:  757:      return 0;
        -:  758:			
        -:  759:    case council_room:
        -:  760:      //Refactor: call council room card method here
    #####:  761:      councilRoomCard(state, currentPlayer, cardDrawn, temphand);
    #####:  762:      return 0;
        -:  763:			
        -:  764:    case feast:
        -:  765:      //gain card with cost up to 5
        -:  766:      //Backup hand
    #####:  767:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  768:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  769:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  770:      }
        -:  771:      //Backup hand
        -:  772:
        -:  773:      //Update Coins for Buy
    #####:  774:      updateCoins(currentPlayer, state, 5);
    #####:  775:      x = 1;//Condition to loop on
    #####:  776:      while( x == 1) {//Buy one card
    #####:  777:	if (supplyCount(choice1, state) <= 0){
    #####:  778:	  if (DEBUG)
        -:  779:	    printf("None of that card left, sorry!\n");
        -:  780:
    #####:  781:	  if (DEBUG){
        -:  782:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  783:	  }
        -:  784:	}
    #####:  785:	else if (state->coins < getCost(choice1)){
    #####:  786:	  printf("That card is too expensive!\n");
        -:  787:
    #####:  788:	  if (DEBUG){
        -:  789:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  790:	  }
        -:  791:	}
        -:  792:	else{
        -:  793:
    #####:  794:	  if (DEBUG){
        -:  795:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  796:	  }
        -:  797:
    #####:  798:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  799:	  x = 0;//No more buying cards
        -:  800:
    #####:  801:	  if (DEBUG){
        -:  802:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  803:	  }
        -:  804:
        -:  805:	}
        -:  806:      }     
        -:  807:
        -:  808:      //Reset Hand
    #####:  809:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  810:	state->hand[currentPlayer][i] = temphand[i];
    #####:  811:	temphand[i] = -1;
        -:  812:      }
        -:  813:      //Reset Hand
        -:  814:      			
    #####:  815:      return 0;
        -:  816:			
        -:  817:    case gardens:
    #####:  818:      return -1;
        -:  819:			
        -:  820:    case mine:
    #####:  821:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  822:
    #####:  823:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  824:	{
    #####:  825:	  return -1;
        -:  826:	}
        -:  827:		
    #####:  828:      if (choice2 > treasure_map || choice2 < curse)
        -:  829:	{
    #####:  830:	  return -1;
        -:  831:	}
        -:  832:
    #####:  833:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:
    #####:  838:      gainCard(choice2, state, 2, currentPlayer);
        -:  839:
        -:  840:      //discard card from hand
    #####:  841:      discardCard(handPos, currentPlayer, state, 0);
        -:  842:
        -:  843:      //discard trashed card
    #####:  844:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  845:	{
    #####:  846:	  if (state->hand[currentPlayer][i] == j)
        -:  847:	    {
    #####:  848:	      discardCard(i, currentPlayer, state, 0);			
    #####:  849:	      break;
        -:  850:	    }
        -:  851:	}
        -:  852:			
    #####:  853:      return 0;
        -:  854:			
        -:  855:    case remodel:
    #####:  856:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  857:
    #####:  858:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  859:	{
    #####:  860:	  return -1;
        -:  861:	}
        -:  862:
    #####:  863:      gainCard(choice2, state, 0, currentPlayer);
        -:  864:
        -:  865:      //discard card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:
        -:  868:      //discard trashed card
    #####:  869:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  870:	{
    #####:  871:	  if (state->hand[currentPlayer][i] == j)
        -:  872:	    {
    #####:  873:	      discardCard(i, currentPlayer, state, 0);			
    #####:  874:	      break;
        -:  875:	    }
        -:  876:	}
        -:  877:
        -:  878:
    #####:  879:      return 0;
        -:  880:		
        -:  881:    case smithy:
    #####:  882:      smithyCard(handPos, currentPlayer, state, 0);
    #####:  883:      return 0;
        -:  884:		
        -:  885:    case village:
        -:  886:      //Refactor: Call village card method here
    #####:  887:      villageCard(handPos, currentPlayer, state, 0);
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case baron:
    #####:  891:      state->numBuys++;//Increase buys by 1!
    #####:  892:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  893:	int p = 0;//Iterator for hand!
    #####:  894:	int card_not_discarded = 1;//Flag for discard set!
    #####:  895:	while(card_not_discarded){
    #####:  896:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  897:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  898:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  899:	    state->discardCount[currentPlayer]++;
    #####:  900:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  901:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  902:	    }
    #####:  903:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  904:	    state->handCount[currentPlayer]--;
    #####:  905:	    card_not_discarded = 0;//Exit the loop
        -:  906:	  }
    #####:  907:	  else if (p > state->handCount[currentPlayer]){
    #####:  908:	    if(DEBUG) {
        -:  909:	      printf("No estate cards in your hand, invalid choice\n");
        -:  910:	      printf("Must gain an estate if there are any\n");
        -:  911:	    }
    #####:  912:	    if (supplyCount(estate, state) > 0){
    #####:  913:	      gainCard(estate, state, 0, currentPlayer);
    #####:  914:	      state->supplyCount[estate]--;//Decrement estates
    #####:  915:	      if (supplyCount(estate, state) == 0){
    #####:  916:		isGameOver(state);
        -:  917:	      }
        -:  918:	    }
    #####:  919:	    card_not_discarded = 0;//Exit the loop
        -:  920:	  }
        -:  921:			    
        -:  922:	  else{
    #####:  923:	    p++;//Next card
        -:  924:	  }
        -:  925:	}
        -:  926:      }
        -:  927:			    
        -:  928:      else{
    #####:  929:	if (supplyCount(estate, state) > 0){
    #####:  930:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  931:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  932:	  if (supplyCount(estate, state) == 0){
    #####:  933:	    isGameOver(state);
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:	    
        -:  938:      
    #####:  939:      return 0;
        -:  940:		
        -:  941:    case great_hall:
        -:  942:      //Refactor: call great hall card here
    #####:  943:      greatHallCard(handPos, currentPlayer, state, 0);
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case minion:
        -:  947:      //+1 action
    #####:  948:      state->numActions++;
        -:  949:			
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
        -:  952:			
    #####:  953:      if (choice1)		//+2 coins
        -:  954:	{
    #####:  955:	  state->coins = state->coins + 2;
        -:  956:	}
        -:  957:			
    #####:  958:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  959:	{
        -:  960:	  //discard hand
    #####:  961:	  while(numHandCards(state) > 0)
        -:  962:	    {
    #####:  963:	      discardCard(handPos, currentPlayer, state, 0);
        -:  964:	    }
        -:  965:				
        -:  966:	  //draw 4
    #####:  967:	  for (i = 0; i < 4; i++)
        -:  968:	    {
    #####:  969:	      drawCard(currentPlayer, state);
        -:  970:	    }
        -:  971:				
        -:  972:	  //other players discard hand and redraw if hand size > 4
    #####:  973:	  for (i = 0; i < state->numPlayers; i++)
        -:  974:	    {
    #####:  975:	      if (i != currentPlayer)
        -:  976:		{
    #####:  977:		  if ( state->handCount[i] > 4 )
        -:  978:		    {
        -:  979:		      //discard hand
    #####:  980:		      while( state->handCount[i] > 0 )
        -:  981:			{
    #####:  982:			  discardCard(handPos, i, state, 0);
        -:  983:			}
        -:  984:							
        -:  985:		      //draw 4
    #####:  986:		      for (j = 0; j < 4; j++)
        -:  987:			{
    #####:  988:			  drawCard(i, state);
        -:  989:			}
        -:  990:		    }
        -:  991:		}
        -:  992:	    }
        -:  993:				
        -:  994:	}
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case steward:
    #####:  998:      if (choice1 == 1)
        -:  999:	{
        -: 1000:	  //+2 cards
    #####: 1001:	  drawCard(currentPlayer, state);
    #####: 1002:	  drawCard(currentPlayer, state);
        -: 1003:	}
    #####: 1004:      else if (choice1 == 2)
        -: 1005:	{
        -: 1006:	  //+2 coins
    #####: 1007:	  state->coins = state->coins + 2;
        -: 1008:	}
        -: 1009:      else
        -: 1010:	{
        -: 1011:	  //trash 2 cards in hand
    #####: 1012:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1013:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1014:	}
        -: 1015:			
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case tribute:
    #####: 1021:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1022:	if (state->deckCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	  state->deckCount[nextPlayer]--;
        -: 1025:	}
    #####: 1026:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1027:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1028:	  state->discardCount[nextPlayer]--;
        -: 1029:	}
        -: 1030:	else{
        -: 1031:	  //No Card to Reveal
    #####: 1032:	  if (DEBUG){
        -: 1033:	    printf("No cards to reveal\n");
        -: 1034:	  }
        -: 1035:	}
        -: 1036:      }
        -: 1037:	    
        -: 1038:      else{
    #####: 1039:	if (state->deckCount[nextPlayer] == 0){
    #####: 1040:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1041:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1042:	    state->deckCount[nextPlayer]++;
    #####: 1043:	    state->discard[nextPlayer][i] = -1;
    #####: 1044:	    state->discardCount[nextPlayer]--;
        -: 1045:	  }
        -: 1046:			    
    #####: 1047:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1048:	} 
    #####: 1049:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
    #####: 1052:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
        -: 1055:      }    
        -: 1056:		       
    #####: 1057:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1058:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1059:	state->playedCardCount++;
    #####: 1060:	tributeRevealedCards[1] = -1;
        -: 1061:      }
        -: 1062:
    #####: 1063:      for (i = 0; i <= 2; i ++){
    #####: 1064:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1065:	  state->coins += 2;
        -: 1066:	}
        -: 1067:		    
    #####: 1068:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1069:	  drawCard(currentPlayer, state);
    #####: 1070:	  drawCard(currentPlayer, state);
        -: 1071:	}
        -: 1072:	else{//Action Card
    #####: 1073:	  state->numActions = state->numActions + 2;
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case ambassador:
    #####: 1080:      j = 0;		//used to check if player has enough cards to discard
        -: 1081:
    #####: 1082:      if (choice2 > 2 || choice2 < 0)
        -: 1083:	{
    #####: 1084:	  return -1;				
        -: 1085:	}
        -: 1086:
    #####: 1087:      if (choice1 == handPos)
        -: 1088:	{
    #####: 1089:	  return -1;
        -: 1090:	}
        -: 1091:
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1095:	    {
    #####: 1096:	      j++;
        -: 1097:	    }
        -: 1098:	}
    #####: 1099:      if (j < choice2)
        -: 1100:	{
    #####: 1101:	  return -1;				
        -: 1102:	}
        -: 1103:
    #####: 1104:      if (DEBUG) 
        -: 1105:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1106:
        -: 1107:      //increase supply count for choosen card by amount being discarded
    #####: 1108:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1109:			
        -: 1110:      //each other player gains a copy of revealed card
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
        -: 1114:	    {
    #####: 1115:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1116:	    }
        -: 1117:	}
        -: 1118:
        -: 1119:      //discard played card from hand
    #####: 1120:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1121:
        -: 1122:      //trash copies of cards returned to supply
    #####: 1123:      for (j = 0; j < choice2; j++)
        -: 1124:	{
    #####: 1125:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1126:	    {
    #####: 1127:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1128:		{
    #####: 1129:		  discardCard(i, currentPlayer, state, 1);
    #####: 1130:		  break;
        -: 1131:		}
        -: 1132:	    }
        -: 1133:	}			
        -: 1134:
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case cutpurse:
        -: 1138:
    #####: 1139:      updateCoins(currentPlayer, state, 2);
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
        -: 1143:	    {
    #####: 1144:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1145:		{
    #####: 1146:		  if (state->hand[i][j] == copper)
        -: 1147:		    {
    #####: 1148:		      discardCard(j, i, state, 0);
    #####: 1149:		      break;
        -: 1150:		    }
    #####: 1151:		  if (j == state->handCount[i])
        -: 1152:		    {
    #####: 1153:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1154:			{
    #####: 1155:			  if (DEBUG)
        -: 1156:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1157:			}	
    #####: 1158:		      break;
        -: 1159:		    }		
        -: 1160:		}
        -: 1161:					
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}				
        -: 1165:
        -: 1166:      //discard played card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:
        -: 1171:		
        -: 1172:    case embargo: 
        -: 1173:      //+2 Coins
    #####: 1174:      state->coins = state->coins + 2;
        -: 1175:			
        -: 1176:      //see if selected pile is in play
    #####: 1177:      if ( state->supplyCount[choice1] == -1 )
        -: 1178:	{
    #####: 1179:	  return -1;
        -: 1180:	}
        -: 1181:			
        -: 1182:      //add embargo token to selected supply pile
    #####: 1183:      state->embargoTokens[choice1]++;
        -: 1184:			
        -: 1185:      //trash card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case outpost:
        -: 1190:      //set outpost flag
    #####: 1191:      state->outpostPlayed++;
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case salvager:
        -: 1198:      //+1 buy
    #####: 1199:      state->numBuys++;
        -: 1200:			
    #####: 1201:      if (choice1)
        -: 1202:	{
        -: 1203:	  //gain coins equal to trashed card
    #####: 1204:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1205:	  //trash card
    #####: 1206:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1207:	}
        -: 1208:			
        -: 1209:      //discard card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case sea_hag:
    #####: 1214:      for (i = 0; i < state->numPlayers; i++){
    #####: 1215:	if (i != currentPlayer){
    #####: 1216:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1217:	  state->discardCount[i]++;
    #####: 1218:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1219:	}
        -: 1220:      }
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case treasure_map:
        -: 1224:      //search hand for another treasure_map
    #####: 1225:      index = -1;
    #####: 1226:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1227:	{
    #####: 1228:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1229:	    {
    #####: 1230:	      index = i;
    #####: 1231:	      break;
        -: 1232:	    }
        -: 1233:	}
    #####: 1234:      if (index > -1)
        -: 1235:	{
        -: 1236:	  //trash both treasure cards
    #####: 1237:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1238:	  discardCard(index, currentPlayer, state, 1);
        -: 1239:
        -: 1240:	  //gain 4 Gold cards
    #####: 1241:	  for (i = 0; i < 4; i++)
        -: 1242:	    {
    #####: 1243:	      gainCard(gold, state, 1, currentPlayer);
        -: 1244:	    }
        -: 1245:				
        -: 1246:	  //return success
    #####: 1247:	  return 1;
        -: 1248:	}
        -: 1249:			
        -: 1250:      //no second treasure_map found in hand
    #####: 1251:      return -1;
        -: 1252:    }
        -: 1253:	
    #####: 1254:  return -1;
        -: 1255:}
        -: 1256:
      340: 1257:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1258:{
        -: 1259:	
        -: 1260:  //if card is not trashed, added to Played pile 
      340: 1261:  if (trashFlag < 1)
        -: 1262:    {
        -: 1263:      //add card to played pile
      335: 1264:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      335: 1265:      state->playedCardCount++;
        -: 1266:    }
        -: 1267:	
        -: 1268:  //set played card to -1
      340: 1269:  state->hand[currentPlayer][handPos] = -1;
        -: 1270:	
        -: 1271:  //remove card from player's hand
      340: 1272:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1273:    {
        -: 1274:      //reduce number of cards in hand
        2: 1275:      state->handCount[currentPlayer]--;
        -: 1276:    }
      338: 1277:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1278:    {
        -: 1279:      //reduce number of cards in hand
    #####: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:  else 	
        -: 1283:    {
        -: 1284:      //replace discarded card with last card in hand
      338: 1285:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1286:      //set last card to -1
      338: 1287:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1288:      //reduce number of cards in hand
      338: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:	
      340: 1292:  return 0;
        -: 1293:}
        -: 1294:
      222: 1295:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1296:{
        -: 1297:  //Note: supplyPos is enum of choosen card
        -: 1298:	
        -: 1299:  //check if supply pile is empty (0) or card is not used in game (-1)
      222: 1300:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1301:    {
      120: 1302:      return -1;
        -: 1303:    }
        -: 1304:	
        -: 1305:  //added card for [whoseTurn] current player:
        -: 1306:  // toFlag = 0 : add to discard
        -: 1307:  // toFlag = 1 : add to deck
        -: 1308:  // toFlag = 2 : add to hand
        -: 1309:
      102: 1310:  if (toFlag == 1)
        -: 1311:    {
       34: 1312:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       34: 1313:      state->deckCount[player]++;
        -: 1314:    }
       68: 1315:  else if (toFlag == 2)
        -: 1316:    {
       34: 1317:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       34: 1318:      state->handCount[player]++;
        -: 1319:    }
        -: 1320:  else
        -: 1321:    {
       34: 1322:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       34: 1323:      state->discardCount[player]++;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //decrease number in supply pile
      102: 1327:  state->supplyCount[supplyPos]--;
        -: 1328:	 
      102: 1329:  return 0;
        -: 1330:}
        -: 1331:
     1394: 1332:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1333:{
        -: 1334:  int i;
        -: 1335:	
        -: 1336:  //reset coin count
     1394: 1337:  state->coins = 0;
        -: 1338:
        -: 1339:  //add coins for each Treasure card in player's hand
     7014: 1340:  for (i = 0; i < state->handCount[player]; i++)
        -: 1341:    {
     5620: 1342:      if (state->hand[player][i] == copper)
        -: 1343:	{
     3602: 1344:	  state->coins += 1;
        -: 1345:	}
     2018: 1346:      else if (state->hand[player][i] == silver)
        -: 1347:	{
      330: 1348:	  state->coins += 2;
        -: 1349:	}
     1688: 1350:      else if (state->hand[player][i] == gold)
        -: 1351:	{
      330: 1352:	  state->coins += 3;
        -: 1353:	}	
        -: 1354:    }	
        -: 1355:
        -: 1356:  //add bonus
     1394: 1357:  state->coins += bonus;
        -: 1358:
     1394: 1359:  return 0;
        -: 1360:}
        -: 1361://end of dominion.c
        -: 1362:
